name: Update sdists

on:
  schedule:
  - cron: "25 5 * * *"
  workflow_dispatch:

permissions:
  contents: read

env:
  FORCE_COLOR: "1"
  UV_SYSTEM_PYTHON: "1"  # make uv do global installs

jobs:
  fetch:
    if: github.repository_owner == 'AA-Turner'
    runs-on: ubuntu-24.04
    timeout-minutes: 120
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: latest
        enable-cache: false

    - name: Fetch top PyPI sdists
      run: uv run fetch-sdists.py

    - name: Extract sdists
      run: |
        set -euo pipefail
        shopt -s nullglob
        rm -rf extracted/
        mkdir -p extracted
        for f in pypi-sdists/*.tar.bz2; do echo "$f" && tar -C extracted/ -xjf "$f" && rm -f "$f"; done
        for f in pypi-sdists/*.tar.gz; do echo "$f" && tar -C extracted/ -xzf "$f" && rm -f "$f"; done
        for f in pypi-sdists/*.tgz; do echo "$f" && tar -C extracted/ -xzf "$f" && rm -f "$f"; done
        for f in pypi-sdists/*.zip; do echo "$f" && unzip -o "$f" -d "extracted/" && rm -f "$f"; done

    - name: Remove SCM directories
      run: 'set -euo pipefail &&
        find extracted/ -type d \( 
             -iname ".git"
          -o -iname ".hg"
          -o -iname ".jj" 
          -o -iname ".svn"
        \) -prune -print -exec rm -rf {} +'

    - name: Remove project-related directories
      run: 'set -euo pipefail &&
        find extracted/ -type d \( 
             -iname "venv"
          -o -iname ".venv"
          -o -iname ".tox" 
          -o -iname ".nox"
          -o -iname ".idea"
          -o -iname ".vs"
          -o -iname ".vscode"
        \) -prune -print -exec rm -rf {} +'

    - name: Remove non-source files
      run: 'set -euo pipefail &&
        find extracted/ -type f ! \(
             -iname "*.py"
          -o -iname "*.c"
          -o -iname "*.c++"
          -o -iname "*.cc"
          -o -iname "*.cpp"
          -o -iname "*.cs"
          -o -iname "*.cxx"
          -o -iname "*.f"
          -o -iname "*.f90"
          -o -iname "*.f95"
          -o -iname "*.go"
          -o -iname "*.h"
          -o -iname "*.h++"
          -o -iname "*.hh"
          -o -iname "*.hpp"
          -o -iname "*.ipp"
          -o -iname "*.java"
          -o -iname "*.pl"
          -o -iname "*.php"
          -o -iname "*.pxd"
          -o -iname "*.pyi"
          -o -iname "*.pyw"
          -o -iname "*.pyx"
          -o -iname "*.rb"
          -o -iname "*.rs"
          -o -iname "*.s"
          -o -iname "*.zig"
          -o -iname "pyproject.toml"
          -o -iname "PKG-INFO"
        \) -delete'

    - name: Remove large files
      run: find extracted/ -type f -size +5M -print -delete

    - name: Make filenames valid for Windows
      shell: python
      run: |
        import glob, os
        reserved = {*range(0x20), *br'?<>\:*|"'}
        table = bytes((ord(b'_') if i in reserved else i for i in range(256)))        
        for path in filter(
            os.path.isfile,
            glob.iglob(b'extracted/**', recursive=True, include_hidden=True)
        ):
            if path.endswith((b' ', b'.')):
                print(f'Renaming {path.decode()} to {path.decode()}_')
                os.rename(path, path + b'_')
            parent, name = os.path.split(path)
            new_path = path.translate(table)
            if path != new_path:
                print(f'Renaming {path.decode()} to {new_path.decode()}')
                try:
                    os.rename(path, new_path)
                except OSError:
                    os.makedirs(new_path, exist_ok=True)
                    try:
                        os.rename(path, new_path)
                    except OSError:
                        print(f'Could not rename {path.decode()} to {new_path.decode()}!')

    - name: Set git configuration
      run: |
        git config core.safecrlf false
        git config http.postBuffer 524288000
        git config lfs.allowincompletepush true
        git config user.name "Adam Turner"
        git config user.email "9087854+aa-turner@users.noreply.github.com"

    - name: Stage extracted source distributions
      run: git add --all --force extracted/

    - name: Commit extracted source distributions
      run: git commit --quiet -m "Top PyPI sdists for $(date)" || true

    - name: Push extracted source distributions
      run: git push --force-with-lease
